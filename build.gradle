plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

apply from: 'common.gradle'

mainClassName = "com.xilinx.rapidwright.MainEntrypoint"

sourceSets {
  main {
    java.destinationDirectory.fileValue(file('bin'))
    java {
      srcDirs = ['src']
    }
  }
  test {
    java {
      srcDirs = ['test']
    }
  }
}

def os = System.getProperty("os.name").toLowerCase().contains("windows") ?
                                       "win64-msvc2005x64" : "linux64-gcc"
def sw = new StringWriter()
def get_rapidwright_version_line = file('.github/workflows/build.yml').filterLine(sw) { 
    line -> line.contains('RAPIDWRIGHT_VERSION:') 
}
def rapidwright_version = sw.toString().replace("RAPIDWRIGHT_VERSION: v", "").replace("-beta", "").trim()

dependencies {
    api 'com.esotericsoftware:kryo:5.2.1'
    api 'org.jgrapht:jgrapht-core:1.3.0'
    api 'org.capnproto:runtime:0.1.13'
    api 'net.sf.jopt-simple:jopt-simple:5.0.4'
    api 'org.python:jython-standalone:2.7.2'
    api 'com.google.protobuf:protobuf-java:3.11.4'
    api 'org.jetbrains:annotations:20.1.0'
    api 'org.zeromq:jeromq:0.5.2'
    api 'commons-cli:commons-cli:1.2'
    api 'org.json:json:20160810'
    api 'com.jcraft:jzlib:1.1.3'
    api 'commons-io:commons-io:2.11.0'
    api 'com.xilinx.rapidwright:qtjambi-'+os+':4.5.2_01'
    api 'com.xilinx.rapidwright:jupyter-kernel-jsr223:1.0.0'
    api 'com.xilinx.rapidwright:rapidwright-api-lib:' + rapidwright_version
}

task copyJars(type: Copy) {
    from configurations.implementation
    into 'jars'
    from configurations.testImplementation
    into 'jars'
}
compileJava.dependsOn(copyJars)

task deleteJars(type: Delete) {
    delete fileTree('jars')
}

task updateJars {
  group = "build setup"
  description = "Removes all jars from RapidWright/jars and replaces with only necessary dependencies."
  dependsOn deleteJars
  dependsOn copyJars
  copyJars.mustRunAfter deleteJars
}

task update_jars {
    group = "build setup"
    description = "Alias for 'updateJars'."
    dependsOn updateJars
}

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier = rapidwright_version + "-sources"
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.implementation
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = rapidwright_version + "-javadoc"
}

task standaloneJar (type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.WARN
    manifest {
        attributes 'Main-Class': 'com.xilinx.rapidwright.util.RapidWright'
    }
    archiveBaseName = 'rapidwright-'+rapidwright_version+'-standalone-' + os.charAt(0) + 'in64'
    from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

artifacts {
    archives javadocJar
    archives sourceJar
    archives jar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            // rapidwright coordinates
            groupId = "com.xilinx.rapidwright"
            artifactId = "rapidwright"
            version = rapidwright_version
            pom {
                name = "RapidWright"
                description = "Open Source companion framework for Xilinx's Vivado for customizing backend implementation"
                url = "http://rapidwright.io"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "RapidWright Developers"
                    }
                }
                scm {
                    connection = 'scm:git@github.com:Xilinx/RapidWright.git'
                    url ='https://github.com/Xilinx/RapidWright'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = project.findProperty("ossrhUsername") ?: ""
                password = project.findProperty("ossrhPassword") ?: ""
            }
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
        }
    }
}

signing {
    setRequired {
        // signing is only required when publishing to maven central
        gradle.taskGraph.allTasks.any { it.equals( publishMavenJavaPublicationToMavenRepository ) }
    }
    sign configurations.archives
    sign publishing.publications.mavenJava
}

