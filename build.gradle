apply plugin: 'application'
apply plugin: 'java-library'
mainClassName = "com.xilinx.rapidwright.MainEntrypoint"

sourceSets {
  main {
    java.destinationDirectory.fileValue(file('bin'))
    java {
      srcDirs = ['src']
    }
  }
  test {
    java {
      srcDirs = ['test']
    }
  }
}

//Kryo needs to access sun.nio.ch.DirectBuffer. This is forbidden by default in Java 16 and up. Check if we need to add a jvm arg.
if (org.gradle.api.JavaVersion.current().isJava10Compatible()) {
	applicationDefaultJvmArgs = ["--add-exports=java.base/sun.nio.ch=ALL-UNNAMED"]
}

test {
    useJUnitPlatform()
    maxHeapSize = "5G"
    //Propagate JVM settings to test JVM
    jvmArgs applicationDefaultJvmArgs
}

tasks.withType(Test) {
  environment 'RAPIDWRIGHT_PATH',file('.')
  //We need to rerun tests when the data files change
  if (file('data').exists()) {
    inputs.dir file('data')
  }
}

sourceCompatibility = 8
targetCompatibility = 8

dependencies {
  api fileTree(dir: 'jars', include: ['*.jar'], exclude: ['junit*.jar', '*-javadoc.jar'])
  testImplementation fileTree(dir: 'jars', include: ['junit-jupiter-*.jar', 'junit-platform-*.jar'])
}

abstract class UpdateJarsTask extends DefaultTask {
    UpdateJarsTask() {
        group = "build setup"
        description = "Download Jar Dependencies"
    }
    @TaskAction
    def updateJars() {
    	def f = new File('rapidwright-installer.jar')
        if (!f.exists()) {
            println 'Downloading...'
            new URL('https://www.rapidwright.io/docs/_downloads/rapidwright-installer.jar').withInputStream{ i -> f.withOutputStream{ it << i }}
        }
        def stdout = new StringBuilder(), stderr = new StringBuilder()
        def proc = 'java -jar rapidwright-installer.jar -u'.execute() 
        proc.consumeProcessOutput(stdout,stderr)
        proc.waitForOrKill(1100000)
        println "$stdout\n$stderr"
        f.delete()
    }
}

// Create a task using the task type
tasks.register('update_jars', UpdateJarsTask)

task updateSubmodules(type:Exec) {
  group = "build setup"
  description = "Update Git submodules"
  executable = 'git'
  args = ['submodule', 'update', '--init', '--recursive']
}

task initSubmodules {
  group = "build setup"
  description = "Init Git submodules (first time only)"
  if (!file("test/RapidWrightDCP/.git").exists()) {
    dependsOn updateSubmodules
  }
}
test.dependsOn initSubmodules

task testPython(type:Exec) {
  testPython() {
      group = "verification"
      description = "Runs the Python unit tests."
  }
  environment 'RAPIDWRIGHT_PATH',file('.')
  environment 'CLASSPATH', sourceSets.main.runtimeClasspath.getAsPath()
  executable = 'python3'
  args = ['-m', 'pytest', '--junitxml', "$buildDir/test-results/testPython/testPython.xml", '--rootdir', 'python/test']
  // Workaround from https://github.com/jpype-project/jpype/issues/842#issuecomment-847027355
  args += ['-p', 'no:faulthandler']
}
test.dependsOn testPython
testPython.dependsOn assemble
testPython.dependsOn initSubmodules
